!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("FeatureAnalytics",[],t):"object"==typeof exports?exports.FeatureAnalytics=t():e.FeatureAnalytics=t()}(this,function(){return function(e){function t(a){if(r[a])return r[a].exports;var n=r[a]={i:a,l:!1,exports:{}};return e[a].call(n.exports,n,n.exports,t),n.l=!0,n.exports}var r={};return t.m=e,t.c=r,t.d=function(e,r,a){t.o(e,r)||Object.defineProperty(e,r,{configurable:!1,enumerable:!0,get:a})},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,"a",r),r},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=1)}([function(e,t,r){"use strict";t.a=function(){return!!navigator.getVRDisplays||!1}()},function(e,t,r){"use strict";function a(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(void 0===e||!Object(i.a)(e))return void console.error("Please provide a valid UA code (UA-xxxx-yy)");n.a.initialize(e),n.a.register(t)}Object.defineProperty(t,"__esModule",{value:!0}),t.register=a;var n=r(2),i=r(23)},function(e,t,r){"use strict";r.d(t,"a",function(){return i});var a=r(3),n=r(4),i={initialize:function(e){!function(e,t,r,a,n,i,o){e.GoogleAnalyticsObject=n,e[n]=e[n]||function(){(e[n].q=e[n].q||[]).push(arguments)},e[n].l=1*new Date,i=t.createElement(r),o=t.getElementsByTagName(r)[0],i.async=1,i.src="https://www.google-analytics.com/analytics.js",o.parentNode.insertBefore(i,o)}(window,document,"script",0,"GA_FEATURE_ANALYTICS"),window.GA_FEATURE_ANALYTICS("create",""+e,"auto"),window.GA_FEATURE_ANALYTICS("send","pageview")},register:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=Object(n.a)(e);console.log(t),e&&(t.isWebGLSupported?Object(a.a)({eventAction:"WebGL Detect",eventLabel:"WebGL is supported"}):Object(a.a)({eventAction:"WebGL Detect",eventLabel:"WebGL is not supported"})),e&&(t.isWebGL2Supported?Object(a.a)({eventAction:"WebGL2 Detect",eventLabel:"WebGL2 is supported"}):Object(a.a)({eventAction:"WebGL2 Detect",eventLabel:"WebGL2 is not supported"}))}}},function(e,t,r){"use strict";r.d(t,"a",function(){return n});var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var a in r)Object.prototype.hasOwnProperty.call(r,a)&&(e[a]=r[a])}return e},n=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t={hitType:"event",eventCategory:"Features",eventAction:"",eventLabel:"",nonInteraction:!0};if(void 0!==window.GA_FEATURE_ANALYTICS&&"function"==typeof window.GA_FEATURE_ANALYTICS){var r=function(){window.GA_FEATURE_ANALYTICS("send",a({},t,e))};"requestIdleCallback"in window?window.requestIdleCallback(r):r()}else console.error("Please provide a valid UA code (UA-xxxx-yy)")}},function(e,t,r){"use strict";r.d(t,"a",function(){return I});var a=r(5),n=r(6),i=r(7),o=r(8),s=r(9),E=r(10),u=r(11),m=r(12),c=r(13),_=r(14),A=r(15),g=r(16),T=r(17),d=r(18),R=r(19),S=r(0),f=r(20),P=r(21),M=r(22),l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var a in r)Object.prototype.hasOwnProperty.call(r,a)&&(e[a]=r[a])}return e},I=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t={devicePixelRatio:a.a,workerPoolSize:i.a,isCookieEnabled:s.a,isDoNotTrackEnabled:E.a,isGamepadSupported:u.a,isRequestIdleCallbackSupported:m.a,isServiceWorkerSupported:c.a,isWebAssemblySupported:_.a,isWebAudioSupported:A.a,isWebGL2Supported:g.a,isWebGLSupported:T.a,isWebRTCSupported:d.a,isWebSocketSupported:R.a,isWebVRSupported:S.a,isWebWorkerSupported:f.a};return S.a?l({},t,{webVRDeviceType:o.a}):e?l({},t,{endianness:n.a,webGL2Features:P.a,webGLFeatures:M.a}):t}},function(e,t,r){"use strict";t.a=function(){return window.devicePixelRatio||1}()},function(e,t,r){"use strict";t.a=function(){if(null!==window.ArrayBuffer){var e=new ArrayBuffer(4),t=new Uint32Array(e),r=new Uint8Array(e);return t[0]=1,1===r[0]?"little":"big"}return"unknown"}()},function(e,t,r){"use strict";t.a=function(){return navigator.hardwareConcurrency||0}()},function(e,t,r){"use strict";var a=r(0);t.a=function(){if(!a.a)return!1;navigator.getVRDisplays().then(function(e){if(e.length>0){var t=e[0].displayName;return/daydream/i.test(t)?"Google Daydream":/vive/i.test(t)?"HTC Vive":/oculus/i.test(t)?"Oculus Rift":/SamsungBrowser.+Mobile VR/i.test(window.navigator.userAgent)?"Samsung GearVR":"Unknown"}return!1})}()},function(e,t,r){"use strict";t.a=function(){return!!navigator.cookieEnabled||!1}()},function(e,t,r){"use strict";t.a=function(){var e=navigator.doNotTrack||!1;return!e&&"unspecified"!==e}()},function(e,t,r){"use strict";t.a=function(){return!!window.Gamepad||!1}()},function(e,t,r){"use strict";t.a=function(){return!!window.requestIdleCallback||!1}()},function(e,t,r){"use strict";t.a=function(){return!!navigator.serviceWorker||!1}()},function(e,t,r){"use strict";t.a=function(){return!!window.WebAssembly||!1}()},function(e,t,r){"use strict";t.a=function(){return!!window.AudioContext||!1}()},function(e,t,r){"use strict";t.a=function(){var e=document.createElement("canvas"),t=e.getContext("webgl2");return t&&t instanceof WebGL2RenderingContext||!1}()},function(e,t,r){"use strict";t.a=function(){var e=document.createElement("canvas"),t=e.getContext("webgl")||e.getContext("experimental-webgl");return t&&t instanceof WebGLRenderingContext||!1}()},function(e,t,r){"use strict";t.a=function(){return!!window.RTCPeerConnection&&!!window.RTCDataChannelEvent||!1}()},function(e,t,r){"use strict";t.a=function(){return!!window.WebSocket||!1}()},function(e,t,r){"use strict";t.a=function(){return!!window.Worker||!1}()},function(e,t,r){"use strict";t.a=function(){var e=document.createElement("canvas"),t=e.getContext("webgl2");if(!t||!t instanceof WebGL2RenderingContext)return!1;var r=t.getExtension("WEBGL_debug_renderer_info");return{renderer:t.getParameter(t.RENDERER),vendor:t.getParameter(t.VENDOR),version:t.getParameter(t.VERSION),shaderVersion:t.getParameter(t.SHADING_LANGUAGE_VERSION),rendererUnmasked:r&&t.getParameter(r.UNMASKED_RENDERER_WEBGL),vendorUnmasked:r&&t.getParameter(r.UNMASKED_VENDOR_WEBGL),supportedExtensions:t.getSupportedExtensions(),antialias:!!t.getContextAttributes().antialias,redBits:t.getParameter(t.RED_BITS),greenBits:t.getParameter(t.GREEN_BITS),blueBits:t.getParameter(t.BLUE_BITS),alphaBits:t.getParameter(t.ALPHA_BITS),depthBits:t.getParameter(t.DEPTH_BITS),stencilBits:t.getParameter(t.STENCIL_BITS),maxRenderBufferSize:t.getParameter(t.MAX_RENDERBUFFER_SIZE),maxCombinedTextureImageUnits:t.getParameter(t.MAX_COMBINED_TEXTURE_IMAGE_UNITS),maxCubeMapTextureSize:t.getParameter(t.MAX_CUBE_MAP_TEXTURE_SIZE),maxFragmentUniformVectors:t.getParameter(t.MAX_FRAGMENT_UNIFORM_VECTORS),maxTextureImageUnits:t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS),maxTextureSize:t.getParameter(t.MAX_TEXTURE_SIZE),maxVaryingVectors:t.getParameter(t.MAX_VARYING_VECTORS),maxVertexAttributes:t.getParameter(t.MAX_VERTEX_ATTRIBS),maxVertexTextureImageUnits:t.getParameter(t.MAX_VERTEX_TEXTURE_IMAGE_UNITS),maxVertexUniformVectors:t.getParameter(t.MAX_VERTEX_UNIFORM_VECTORS),aliasedLineWidthRange:t.getParameter(t.ALIASED_LINE_WIDTH_RANGE),aliasedPointSizeRange:t.getParameter(t.ALIASED_POINT_SIZE_RANGE),maxViewportDimensions:t.getParameter(t.MAX_VIEWPORT_DIMS),vertexShaderHighPrecision:t.getShaderPrecisionFormat(t.VERTEX_SHADER,t.HIGH_FLOAT),vertexShaderMediumPrecision:t.getShaderPrecisionFormat(t.VERTEX_SHADER,t.MEDIUM_FLOAT),vertexShaderLowPrecision:t.getShaderPrecisionFormat(t.VERTEX_SHADER,t.LOW_FLOAT),fragmentShaderHighPrecision:t.getShaderPrecisionFormat(t.FRAGMENT_SHADER,t.HIGH_FLOAT),fragmentShaderMediumPrecision:t.getShaderPrecisionFormat(t.FRAGMENT_SHADER,t.MEDIUM_FLOAT),fragmentShaderLowPrecision:t.getShaderPrecisionFormat(t.FRAGMENT_SHADER,t.LOW_FLOAT),maxVertexUniformComponents:t.getParameter(t.MAX_VERTEX_UNIFORM_COMPONENTS),maxVertexUniformBlocks:t.getParameter(t.MAX_VERTEX_UNIFORM_BLOCKS),maxVertexOutputComponents:t.getParameter(t.MAX_VERTEX_OUTPUT_COMPONENTS),maxVaryingComponents:t.getParameter(t.MAX_VARYING_COMPONENTS),maxFragmentUniformComponents:t.getParameter(t.MAX_FRAGMENT_UNIFORM_COMPONENTS),maxFragmentUniformBlocks:t.getParameter(t.MAX_FRAGMENT_UNIFORM_BLOCKS),maxFragmentInputComponents:t.getParameter(t.MAX_FRAGMENT_INPUT_COMPONENTS),minProgramTexelOffset:t.getParameter(t.MIN_PROGRAM_TEXEL_OFFSET),maxProgramTexelOffset:t.getParameter(t.MAX_PROGRAM_TEXEL_OFFSET),maxDrawBuffers:t.getParameter(t.MAX_DRAW_BUFFERS),maxColorAttachments:t.getParameter(t.MAX_COLOR_ATTACHMENTS),maxSamples:t.getParameter(t.MAX_SAMPLES),max3dTextureSize:t.getParameter(t.MAX_3D_TEXTURE_SIZE),maxArrayTextureLayers:t.getParameter(t.MAX_ARRAY_TEXTURE_LAYERS),maxTextureLodBias:t.getParameter(t.MAX_TEXTURE_LOD_BIAS),maxUniformBufferBindings:t.getParameter(t.MAX_UNIFORM_BUFFER_BINDINGS),maxUniformBlockSize:t.getParameter(t.MAX_UNIFORM_BLOCK_SIZE),uniformBufferOffsetAlignment:t.getParameter(t.UNIFORM_BUFFER_OFFSET_ALIGNMENT),maxCombinedUniformBlocks:t.getParameter(t.MAX_COMBINED_UNIFORM_BLOCKS),maxCombinedVertexUniformComponents:t.getParameter(t.MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS),maxCombinedFragmentUniformComponents:t.getParameter(t.MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS),maxTransformFeedbackInterleavedComponents:t.getParameter(t.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS),maxTransformFeedbackSeparateAttribs:t.getParameter(t.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS),maxTransformFeedbackSeparateComponents:t.getParameter(t.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS),maxElementIndex:t.getParameter(t.MAX_ELEMENT_INDEX),maxServerWaitTimeout:t.getParameter(t.MAX_SERVER_WAIT_TIMEOUT)}}()},function(e,t,r){"use strict";t.a=function(){var e=document.createElement("canvas"),t=e.getContext("webgl")||e.getContext("experimental-webgl");if(!t||!t instanceof WebGLRenderingContext)return!1;var r=t.getExtension("WEBGL_debug_renderer_info");console.log(t.getShaderPrecisionFormat(t.VERTEX_SHADER,t.LOW_FLOAT));var a={renderer:t.getParameter(t.RENDERER),vendor:t.getParameter(t.VENDOR),version:t.getParameter(t.VERSION),shaderVersion:t.getParameter(t.SHADING_LANGUAGE_VERSION),rendererUnmasked:r&&t.getParameter(r.UNMASKED_RENDERER_WEBGL),vendorUnmasked:r&&t.getParameter(r.UNMASKED_VENDOR_WEBGL),supportedExtensions:t.getSupportedExtensions(),antialias:!!t.getContextAttributes().antialias,redBits:t.getParameter(t.RED_BITS),greenBits:t.getParameter(t.GREEN_BITS),blueBits:t.getParameter(t.BLUE_BITS),alphaBits:t.getParameter(t.ALPHA_BITS),depthBits:t.getParameter(t.DEPTH_BITS),stencilBits:t.getParameter(t.STENCIL_BITS),maxRenderBufferSize:t.getParameter(t.MAX_RENDERBUFFER_SIZE),maxCombinedTextureImageUnits:t.getParameter(t.MAX_COMBINED_TEXTURE_IMAGE_UNITS),maxCubeMapTextureSize:t.getParameter(t.MAX_CUBE_MAP_TEXTURE_SIZE),maxFragmentUniformVectors:t.getParameter(t.MAX_FRAGMENT_UNIFORM_VECTORS),maxTextureImageUnits:t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS),maxTextureSize:t.getParameter(t.MAX_TEXTURE_SIZE),maxVaryingVectors:t.getParameter(t.MAX_VARYING_VECTORS),maxVertexAttributes:t.getParameter(t.MAX_VERTEX_ATTRIBS),maxVertexTextureImageUnits:t.getParameter(t.MAX_VERTEX_TEXTURE_IMAGE_UNITS),maxVertexUniformVectors:t.getParameter(t.MAX_VERTEX_UNIFORM_VECTORS),aliasedLineWidthRange:t.getParameter(t.ALIASED_LINE_WIDTH_RANGE),aliasedPointSizeRange:t.getParameter(t.ALIASED_POINT_SIZE_RANGE),maxViewportDimensions:t.getParameter(t.MAX_VIEWPORT_DIMS),vertexShaderHighPrecision:t.getShaderPrecisionFormat(t.VERTEX_SHADER,t.HIGH_FLOAT),vertexShaderMediumPrecision:t.getShaderPrecisionFormat(t.VERTEX_SHADER,t.MEDIUM_FLOAT),vertexShaderLowPrecision:t.getShaderPrecisionFormat(t.VERTEX_SHADER,t.LOW_FLOAT),fragmentShaderHighPrecision:t.getShaderPrecisionFormat(t.FRAGMENT_SHADER,t.HIGH_FLOAT),fragmentShaderMediumPrecision:t.getShaderPrecisionFormat(t.FRAGMENT_SHADER,t.MEDIUM_FLOAT),fragmentShaderLowPrecision:t.getShaderPrecisionFormat(t.FRAGMENT_SHADER,t.LOW_FLOAT)};return console.log(a),a}()},function(e,t,r){"use strict";function a(e){return/^ua-\d{4,9}-\d{1,4}$/i.test(e.toString())}t.a=a}])});